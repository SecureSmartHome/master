/**
 * This class is generated by jOOQ
 */
package de.unipassau.isl.evs.ssh.master.database.generated.tables;


import de.unipassau.isl.evs.ssh.master.database.generated.DefaultSchema;
import de.unipassau.isl.evs.ssh.master.database.generated.Keys;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.ComposedOfPermissionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComposedOfPermission extends TableImpl<ComposedOfPermissionRecord> {

    private static final long serialVersionUID = 87793826;

    /**
     * The reference instance of <code>composed_of_permission</code>
     */
    public static final ComposedOfPermission COMPOSED_OF_PERMISSION = new ComposedOfPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComposedOfPermissionRecord> getRecordType() {
        return ComposedOfPermissionRecord.class;
    }

    /**
     * The column <code>composed_of_permission.permissionId</code>.
     */
    public final TableField<ComposedOfPermissionRecord, Integer> PERMISSIONID = createField("permissionId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>composed_of_permission.permissionTemplateId</code>.
     */
    public final TableField<ComposedOfPermissionRecord, Integer> PERMISSIONTEMPLATEID = createField("permissionTemplateId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>composed_of_permission</code> table reference
     */
    public ComposedOfPermission() {
        this("composed_of_permission", null);
    }

    /**
     * Create an aliased <code>composed_of_permission</code> table reference
     */
    public ComposedOfPermission(String alias) {
        this(alias, COMPOSED_OF_PERMISSION);
    }

    private ComposedOfPermission(String alias, Table<ComposedOfPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComposedOfPermission(String alias, Table<ComposedOfPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ComposedOfPermissionRecord> getPrimaryKey() {
        return Keys.PK_COMPOSED_OF_PERMISSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ComposedOfPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<ComposedOfPermissionRecord>>asList(Keys.PK_COMPOSED_OF_PERMISSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ComposedOfPermissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComposedOfPermissionRecord, ?>>asList(Keys.FK_COMPOSED_OF_PERMISSION_PERMISSION_1, Keys.FK_COMPOSED_OF_PERMISSION_PERMISSIONTEMPLATE_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ComposedOfPermission as(String alias) {
        return new ComposedOfPermission(alias, this);
    }

    /**
     * Rename this table
     */
    public ComposedOfPermission rename(String name) {
        return new ComposedOfPermission(name, null);
    }
}
