/**
 * This class is generated by jOOQ
 */
package de.unipassau.isl.evs.ssh.master.database.generated.tables;


import de.unipassau.isl.evs.ssh.master.database.generated.DefaultSchema;
import de.unipassau.isl.evs.ssh.master.database.generated.Keys;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.HasPermissionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HasPermission extends TableImpl<HasPermissionRecord> {

    private static final long serialVersionUID = 179399660;

    /**
     * The reference instance of <code>has_permission</code>
     */
    public static final HasPermission HAS_PERMISSION = new HasPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HasPermissionRecord> getRecordType() {
        return HasPermissionRecord.class;
    }

    /**
     * The column <code>has_permission.permissionId</code>.
     */
    public final TableField<HasPermissionRecord, Integer> PERMISSIONID = createField("permissionId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>has_permission.userId</code>.
     */
    public final TableField<HasPermissionRecord, Integer> USERID = createField("userId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>has_permission</code> table reference
     */
    public HasPermission() {
        this("has_permission", null);
    }

    /**
     * Create an aliased <code>has_permission</code> table reference
     */
    public HasPermission(String alias) {
        this(alias, HAS_PERMISSION);
    }

    private HasPermission(String alias, Table<HasPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private HasPermission(String alias, Table<HasPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HasPermissionRecord> getPrimaryKey() {
        return Keys.PK_HAS_PERMISSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HasPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<HasPermissionRecord>>asList(Keys.PK_HAS_PERMISSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<HasPermissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HasPermissionRecord, ?>>asList(Keys.FK_HAS_PERMISSION_PERMISSION_1, Keys.FK_HAS_PERMISSION_USERDEVICE_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HasPermission as(String alias) {
        return new HasPermission(alias, this);
    }

    /**
     * Rename this table
     */
    public HasPermission rename(String name) {
        return new HasPermission(name, null);
    }
}
