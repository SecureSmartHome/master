/*
 * MIT License
 *
 * Copyright (c) 2016.
 * Bucher Andreas, Fink Simon Dominik, Fraedrich Christoph, Popp Wolfgang,
 * Sell Leon, Werli Philemon
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This class is generated by jOOQ
 */
package de.unipassau.isl.evs.ssh.master.database.generated;


import de.unipassau.isl.evs.ssh.master.database.generated.tables.ComposedOfPermission;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Devicegroup;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Electronicmodule;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.HasPermission;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Holidaylog;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Permission;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Permissiontemplate;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Slave;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.Userdevice;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.ComposedOfPermissionRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.DevicegroupRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.ElectronicmoduleRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.HasPermissionRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.HolidaylogRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.PermissionRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.PermissiontemplateRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.SlaveRecord;
import de.unipassau.isl.evs.ssh.master.database.generated.tables.records.UserdeviceRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code></code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DevicegroupRecord> PK_DEVICEGROUP = UniqueKeys0.PK_DEVICEGROUP;
    public static final UniqueKey<ElectronicmoduleRecord> PK_ELECTRONICMODULE = UniqueKeys0.PK_ELECTRONICMODULE;
    public static final UniqueKey<HolidaylogRecord> PK_HOLIDAYLOG = UniqueKeys0.PK_HOLIDAYLOG;
    public static final UniqueKey<PermissionRecord> PK_PERMISSION = UniqueKeys0.PK_PERMISSION;
    public static final UniqueKey<PermissiontemplateRecord> PK_PERMISSIONTEMPLATE = UniqueKeys0.PK_PERMISSIONTEMPLATE;
    public static final UniqueKey<SlaveRecord> PK_SLAVE = UniqueKeys0.PK_SLAVE;
    public static final UniqueKey<UserdeviceRecord> PK_USERDEVICE = UniqueKeys0.PK_USERDEVICE;
    public static final UniqueKey<ComposedOfPermissionRecord> PK_COMPOSED_OF_PERMISSION = UniqueKeys0.PK_COMPOSED_OF_PERMISSION;
    public static final UniqueKey<HasPermissionRecord> PK_HAS_PERMISSION = UniqueKeys0.PK_HAS_PERMISSION;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DevicegroupRecord, PermissiontemplateRecord> FK_DEVICEGROUP_PERMISSIONTEMPLATE_1 = ForeignKeys0.FK_DEVICEGROUP_PERMISSIONTEMPLATE_1;
    public static final ForeignKey<ElectronicmoduleRecord, SlaveRecord> FK_ELECTRONICMODULE_SLAVE_1 = ForeignKeys0.FK_ELECTRONICMODULE_SLAVE_1;
    public static final ForeignKey<HolidaylogRecord, ElectronicmoduleRecord> FK_HOLIDAYLOG_ELECTRONICMODULE_1 = ForeignKeys0.FK_HOLIDAYLOG_ELECTRONICMODULE_1;
    public static final ForeignKey<PermissionRecord, ElectronicmoduleRecord> FK_PERMISSION_ELECTRONICMODULE_1 = ForeignKeys0.FK_PERMISSION_ELECTRONICMODULE_1;
    public static final ForeignKey<UserdeviceRecord, DevicegroupRecord> FK_USERDEVICE_DEVICEGROUP_1 = ForeignKeys0.FK_USERDEVICE_DEVICEGROUP_1;
    public static final ForeignKey<ComposedOfPermissionRecord, PermissionRecord> FK_COMPOSED_OF_PERMISSION_PERMISSION_1 = ForeignKeys0.FK_COMPOSED_OF_PERMISSION_PERMISSION_1;
    public static final ForeignKey<ComposedOfPermissionRecord, PermissiontemplateRecord> FK_COMPOSED_OF_PERMISSION_PERMISSIONTEMPLATE_1 = ForeignKeys0.FK_COMPOSED_OF_PERMISSION_PERMISSIONTEMPLATE_1;
    public static final ForeignKey<HasPermissionRecord, PermissionRecord> FK_HAS_PERMISSION_PERMISSION_1 = ForeignKeys0.FK_HAS_PERMISSION_PERMISSION_1;
    public static final ForeignKey<HasPermissionRecord, UserdeviceRecord> FK_HAS_PERMISSION_USERDEVICE_1 = ForeignKeys0.FK_HAS_PERMISSION_USERDEVICE_1;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<DevicegroupRecord> PK_DEVICEGROUP = createUniqueKey(Devicegroup.DEVICEGROUP, "pk_DeviceGroup", Devicegroup.DEVICEGROUP._ID);
        public static final UniqueKey<ElectronicmoduleRecord> PK_ELECTRONICMODULE = createUniqueKey(Electronicmodule.ELECTRONICMODULE, "pk_ElectronicModule", Electronicmodule.ELECTRONICMODULE._ID);
        public static final UniqueKey<HolidaylogRecord> PK_HOLIDAYLOG = createUniqueKey(Holidaylog.HOLIDAYLOG, "pk_HolidayLog", Holidaylog.HOLIDAYLOG._ID);
        public static final UniqueKey<PermissionRecord> PK_PERMISSION = createUniqueKey(Permission.PERMISSION, "pk_Permission", Permission.PERMISSION._ID);
        public static final UniqueKey<PermissiontemplateRecord> PK_PERMISSIONTEMPLATE = createUniqueKey(Permissiontemplate.PERMISSIONTEMPLATE, "pk_PermissionTemplate", Permissiontemplate.PERMISSIONTEMPLATE._ID);
        public static final UniqueKey<SlaveRecord> PK_SLAVE = createUniqueKey(Slave.SLAVE, "pk_Slave", Slave.SLAVE._ID);
        public static final UniqueKey<UserdeviceRecord> PK_USERDEVICE = createUniqueKey(Userdevice.USERDEVICE, "pk_UserDevice", Userdevice.USERDEVICE._ID);
        public static final UniqueKey<ComposedOfPermissionRecord> PK_COMPOSED_OF_PERMISSION = createUniqueKey(ComposedOfPermission.COMPOSED_OF_PERMISSION, "pk_composed_of_permission", ComposedOfPermission.COMPOSED_OF_PERMISSION.PERMISSIONID, ComposedOfPermission.COMPOSED_OF_PERMISSION.PERMISSIONTEMPLATEID);
        public static final UniqueKey<HasPermissionRecord> PK_HAS_PERMISSION = createUniqueKey(HasPermission.HAS_PERMISSION, "pk_has_permission", HasPermission.HAS_PERMISSION.PERMISSIONID, HasPermission.HAS_PERMISSION.USERID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<DevicegroupRecord, PermissiontemplateRecord> FK_DEVICEGROUP_PERMISSIONTEMPLATE_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_PERMISSIONTEMPLATE, Devicegroup.DEVICEGROUP, "fk_DeviceGroup_PermissionTemplate_1", Devicegroup.DEVICEGROUP.PERMISSIONTEMPLATEID);
        public static final ForeignKey<ElectronicmoduleRecord, SlaveRecord> FK_ELECTRONICMODULE_SLAVE_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_SLAVE, Electronicmodule.ELECTRONICMODULE, "fk_ElectronicModule_Slave_1", Electronicmodule.ELECTRONICMODULE.SLAVEID);
        public static final ForeignKey<HolidaylogRecord, ElectronicmoduleRecord> FK_HOLIDAYLOG_ELECTRONICMODULE_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_ELECTRONICMODULE, Holidaylog.HOLIDAYLOG, "fk_HolidayLog_ElectronicModule_1", Holidaylog.HOLIDAYLOG.ELECTRONICMODULEID);
        public static final ForeignKey<PermissionRecord, ElectronicmoduleRecord> FK_PERMISSION_ELECTRONICMODULE_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_ELECTRONICMODULE, Permission.PERMISSION, "fk_Permission_ElectronicModule_1", Permission.PERMISSION.ELECTRONICMODULEID);
        public static final ForeignKey<UserdeviceRecord, DevicegroupRecord> FK_USERDEVICE_DEVICEGROUP_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_DEVICEGROUP, Userdevice.USERDEVICE, "fk_UserDevice_DeviceGroup_1", Userdevice.USERDEVICE.GROUPID);
        public static final ForeignKey<ComposedOfPermissionRecord, PermissionRecord> FK_COMPOSED_OF_PERMISSION_PERMISSION_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_PERMISSION, ComposedOfPermission.COMPOSED_OF_PERMISSION, "fk_composed_of_permission_Permission_1", ComposedOfPermission.COMPOSED_OF_PERMISSION.PERMISSIONID);
        public static final ForeignKey<ComposedOfPermissionRecord, PermissiontemplateRecord> FK_COMPOSED_OF_PERMISSION_PERMISSIONTEMPLATE_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_PERMISSIONTEMPLATE, ComposedOfPermission.COMPOSED_OF_PERMISSION, "fk_composed_of_permission_PermissionTemplate_1", ComposedOfPermission.COMPOSED_OF_PERMISSION.PERMISSIONTEMPLATEID);
        public static final ForeignKey<HasPermissionRecord, PermissionRecord> FK_HAS_PERMISSION_PERMISSION_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_PERMISSION, HasPermission.HAS_PERMISSION, "fk_has_permission_Permission_1", HasPermission.HAS_PERMISSION.PERMISSIONID);
        public static final ForeignKey<HasPermissionRecord, UserdeviceRecord> FK_HAS_PERMISSION_USERDEVICE_1 = createForeignKey(de.unipassau.isl.evs.ssh.master.database.generated.Keys.PK_USERDEVICE, HasPermission.HAS_PERMISSION, "fk_has_permission_UserDevice_1", HasPermission.HAS_PERMISSION.USERID);
    }
}
